version: '3.7'

services:
  db:
    container_name: postgres-prod
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - '5432:5432'

  evolution-api:
    container_name: evolution_api-prod
    image: atendai/evolution-api:v1.0.7
    restart: always
    environment:
      - CORS_ORIGIN=*
      - CORS_METHODS=${CORS_METHODS}
      - CORS_CREDENTIALS=${CORS_CREDENTIALS}
      - CONFIG_SESSION_PHONE_CLIENT=${CONFIG_SESSION_PHONE_CLIENT}
      - CONFIG_SESSION_PHONE_NAME=${CONFIG_SESSION_PHONE_NAME}
      - CONFIG_QRCODE_LIMIT=${CONFIG_QRCODE_LIMIT}
      - AUTHENTICATION_TYPE=${AUTHENTICATION_TYPE}
      - AUTHENTICATION_API_KEY=${AUTHENTICATION_API_KEY}
    ports:
      - "8080:8080"
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store

  next-app:
    container_name: next-app-prod
    build:
      context: ./
      dockerfile: ./app/prod.Dockerfile
      args:
        - NODE_ENV=production
        - EVOLUTION_API_URL=${EVOLUTION_API_URL}
        - DATABASE_URL=${DATABASE_URL}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_USER=${POSTGRES_USER}
        - AUTH_SECRET=${AUTH_SECRET}
        - AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}
        - AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}
        - AUTHENTICATION_API_KEY=${AUTHENTICATION_API_KEY}
    restart: always
    volumes:
      - nextjs_cache:/app/.next
      - .:/app
      - prisma_volume:/app/node_modules/@prisma
    ports:
      - 3000:3000
    depends_on:
      - db
      - evolution-api

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  my_network:
    external: true

volumes:
  nextjs_cache:
  postgres:
  evolution_store:
  evolution_instances:
  prisma_volume: